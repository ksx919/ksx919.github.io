{"version":3,"file":"js/292.63ee27dc.js","mappings":"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","sources":["webpack://aihub/./src/views/PlanMaster.vue","webpack://aihub/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://aihub/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://aihub/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://aihub/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://aihub/../src/defaults.ts","webpack://aihub/../src/rules.ts","webpack://aihub/../src/helpers.ts","webpack://aihub/../src/Tokenizer.ts","webpack://aihub/../src/Lexer.ts","webpack://aihub/../src/Renderer.ts","webpack://aihub/../src/TextRenderer.ts","webpack://aihub/../src/Parser.ts","webpack://aihub/../src/Hooks.ts","webpack://aihub/../src/Instance.ts","webpack://aihub/../src/marked.ts","webpack://aihub/./src/views/PlanMaster.vue?7f29"],"sourcesContent":["<template>\n  <div class=\"plan-master-layout\" :class=\"{ 'dark-mode': isDarkMode }\">\n    <aside class=\"sidebar\">\n      <div class=\"sidebar-header\">\n        <h2>AI计划通</h2>\n        <p class=\"subtitle\">智能规划日程与目标</p>\n      </div>\n      <div class=\"chat-list\">\n        <div\n          v-for=\"chat in chatList\"\n          :key=\"chat.chatId\"\n          :class=\"['chat-item', chat.chatId === currentChatId ? 'active' : '']\"\n          @click=\"switchChat(chat.chatId)\"\n        >\n          <div class=\"chat-summary\">\n            {{ chat.summary || '（空会话）' }}\n          </div>\n          <div class=\"chat-time\">{{ formatTime(chat.createTime) }}</div>\n        </div>\n      </div>\n      <button class=\"new-chat-btn\" @click=\"newChat\">+ 新建规划</button>\n    </aside>\n    \n    <main class=\"chat-main\">\n      <div class=\"chat-header\" :class=\"{ 'collapsed': isHeaderCollapsed }\">\n        <div class=\"header-content\">\n          <h1>AI计划通</h1>\n          <div class=\"features\">\n            <span class=\"feature-tag\">日程规划</span>\n            <span class=\"feature-tag\">旅游规划</span>\n            <span class=\"feature-tag\">天气查询</span>\n            <span class=\"feature-tag\">路线规划</span>\n          </div>\n        </div>\n        <button class=\"collapse-btn\" @click=\"toggleHeader\" :title=\"isHeaderCollapsed ? '展开标题' : '收起标题'\">\n          {{ isHeaderCollapsed ? '▼' : '▲' }}\n        </button>\n      </div>\n      \n      <div class=\"chat-window\">\n        <div class=\"messages\" ref=\"messagesContainer\">\n          <div v-for=\"(msg, idx) in currentMessages\" :key=\"idx\" :class=\"['message', msg.role]\">\n            <div class=\"message-avatar\">\n              <div v-if=\"msg.role === 'user'\" class=\"user-avatar\">👤</div>\n              <div v-else class=\"ai-avatar\">🤖</div>\n            </div>\n            <div class=\"message-content\">\n              <!-- 用户消息 -->\n              <template v-if=\"msg.role === 'user'\">\n                <div class=\"user-message\">\n                  <span class=\"text\">{{ msg.text }}</span>\n                </div>\n              </template>\n              \n              <!-- AI消息 -->\n              <template v-else>\n                <!-- 加载动画 -->\n                <div v-if=\"loading && idx === currentMessages.length - 1 && !msg.text\" class=\"loading-dots\">\n                  <span class=\"dot\"></span>\n                  <span class=\"dot\"></span>\n                  <span class=\"dot\"></span>\n                </div>\n                \n                <!-- AI回复内容 -->\n                <div v-if=\"msg.text\" class=\"ai-response\">\n                  <div class=\"response-text\" v-html=\"formatResponse(msg.text)\"></div>\n                </div>\n              </template>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"input-bar\">\n          <div class=\"input-wrapper\">\n            <textarea\n              v-model=\"input\"\n              @input=\"autoResizeInput\"\n              @keydown=\"handleKeydown\"\n              placeholder=\"告诉我您的规划需求，比如：我想去北京旅游，帮我规划一下行程...\"\n              :disabled=\"loading\"\n              class=\"input-auto textarea-auto\"\n              rows=\"1\"\n              style=\"resize:none;overflow:hidden;\"\n            />\n            <div class=\"input-actions\">\n              <button class=\"send-btn\" @click=\"send\" :disabled=\"loading || !input.trim()\">\n                <span v-if=\"loading\">发送中...</span>\n                <span v-else>发送</span>\n              </button>\n            </div>\n          </div>\n          \n          <!-- 快捷操作按钮 -->\n          <div class=\"quick-actions\">\n            <button class=\"quick-btn\" @click=\"quickAction('天气')\">查询天气</button>\n            <button class=\"quick-btn\" @click=\"quickAction('路线')\">路线规划</button>\n            <button class=\"quick-btn\" @click=\"quickAction('景点')\">景点推荐</button>\n            <button class=\"quick-btn\" @click=\"quickAction('日程')\">日程规划</button>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\nimport { ref, watch, onMounted, nextTick } from 'vue'\nimport axios from 'axios'\nimport { marked } from 'marked'\n\nfunction genId() {\n  return 'planner_' + Date.now() + '_' + Math.random().toString(36).slice(2, 8)\n}\n\nexport default {\n  name: 'PlanMaster',\n  setup() {\n    const chatList = ref([])\n    const currentChatId = ref('')\n    const input = ref('')\n    const loading = ref(false)\n    const currentMessages = ref([])\n    const messagesContainer = ref(null)\n    const isDarkMode = ref(false)\n    const isHeaderCollapsed = ref(false)\n    \n    // 为每个会话维护独立的消息\n    const chatMessages = ref({})\n    \n    // 初始化\n    onMounted(async () => {\n      await fetchChatList()\n      if (chatList.value.length === 0) {\n        newChat()\n      } else {\n        switchChat(chatList.value[0].chatId)\n      }\n      \n      // 初始化日夜间模式\n      initDarkMode()\n      \n      // 监听日夜间模式变化\n      const observer = new MutationObserver(() => {\n        updateDarkMode()\n      })\n      observer.observe(document.body, {\n        attributes: true,\n        attributeFilter: ['class']\n      })\n    })\n    \n    // 获取会话列表\n    const fetchChatList = async () => {\n      try {\n        const resp = await axios.get('/planner/history/planner/with-time')\n        // {chatId: createTime} 映射\n        const chatIdsWithTime = resp.data\n        const chatListWithTitles = []\n        \n        // 为每个会话获取消息并确定最后更新时间\n        for (const [chatId, createTime] of Object.entries(chatIdsWithTime)) {\n          try {\n            const messagesResp = await axios.get(`/planner/history/planner/${chatId}`)\n            const messages = messagesResp.data\n            let title = '（空会话）'\n            let lastUpdateTime = createTime // 默认使用创建时间\n            \n            if (messages.length > 0) {\n              // 找到第一条用户消息作为标题\n              const firstUserMessage = messages.find(msg => msg.role === 'user')\n              if (firstUserMessage && firstUserMessage.content) {\n                title = firstUserMessage.content.slice(0, 20) + (firstUserMessage.content.length > 20 ? '...' : '')\n              }\n              \n              // 使用最后一条消息的时间作为更新时间\n              // 这里假设后端返回的消息按时间顺序排列，最后一条是最新的\n              if (messages.length > 0) {\n                // 如果后端没有提供消息时间，我们使用创建时间\n                // 实际项目中可能需要后端提供每条消息的时间戳\n                lastUpdateTime = createTime\n              }\n            }\n            \n            chatListWithTitles.push({ \n              chatId, \n              summary: title,\n              createTime: lastUpdateTime\n            })\n          } catch (error) {\n            // 如果获取消息失败，使用默认标题\n            chatListWithTitles.push({ \n              chatId, \n              summary: '（空会话）',\n              createTime: createTime\n            })\n          }\n        }\n        \n        // 按最后更新时间排序，最新的在前面\n        chatListWithTitles.sort((a, b) => b.createTime - a.createTime)\n        \n        chatList.value = chatListWithTitles\n        // 自动选中第一个\n        if (chatList.value.length > 0 && !currentChatId.value) {\n          currentChatId.value = chatList.value[0].chatId\n        }\n      } catch (error) {\n        console.error('获取会话列表失败:', error)\n      }\n    }\n    \n    // 新建聊天\n    const newChat = () => {\n      const chatId = genId()\n      currentChatId.value = chatId\n      chatMessages.value[chatId] = []\n      currentMessages.value = []\n      // 不立即添加到聊天列表，等发送消息时再添加\n    }\n    \n    // 获取当前会话消息\n    const fetchMessages = async (chatId) => {\n      if (!chatId) return\n      try {\n        const resp = await axios.get(`/planner/history/planner/${chatId}`)\n        // resp.data: [{role, content}]\n        const messages = resp.data.map(msg => {\n          if (msg.role === 'assistant') {\n            return { role: 'ai', text: msg.content }\n          } else {\n            return { role: 'user', text: msg.content }\n          }\n        })\n        \n        // 更新会话消息\n        chatMessages.value[chatId] = messages\n        // 如果是当前会话，更新currentMessages\n        if (chatId === currentChatId.value) {\n          currentMessages.value = messages\n          scrollToBottom()\n        }\n      } catch (error) {\n        console.error('获取消息失败:', error)\n      }\n    }\n\n    // 切换聊天\n    const switchChat = async (chatId) => {\n      currentChatId.value = chatId\n      // 如果会话消息已存在，直接使用\n      if (chatMessages.value[chatId]) {\n        currentMessages.value = chatMessages.value[chatId]\n        scrollToBottom()\n      } else {\n        // 否则从后端获取\n        await fetchMessages(chatId)\n      }\n    }\n    \n    // 发送消息\n    const send = async () => {\n      if (!input.value.trim() || loading.value) return\n      \n      const chatId = currentChatId.value\n      // 确保 chatId 存在，如果不存在则生成一个新的\n      if (!chatId) {\n        const newId = genId()\n        currentChatId.value = newId\n        chatMessages.value[newId] = []\n      }\n      \n      const prompt = input.value.trim()\n      input.value = ''\n      loading.value = true\n      \n      // 获取当前会话的消息列表\n      let messages = chatMessages.value[currentChatId.value] || []\n      \n      // 如果是第一条消息，先添加到聊天列表\n      if (messages.length === 0) {\n        const currentTime = Date.now()\n        chatList.value.unshift({ \n          chatId: currentChatId.value, \n          summary: prompt.slice(0, 20) + (prompt.length > 20 ? '...' : ''),\n          createTime: currentTime\n        })\n      } else {\n        // 如果不是第一条消息，更新会话时间\n        const currentChat = chatList.value.find(c => c.chatId === currentChatId.value)\n        if (currentChat) {\n          currentChat.createTime = Date.now()\n        }\n      }\n      \n      // 先添加用户消息到界面\n      messages.push({ role: 'user', text: prompt })\n      chatMessages.value[currentChatId.value] = messages\n      \n      // 立即创建一个空的AI消息\n      messages.push({ role: 'ai', text: '' })\n      chatMessages.value[currentChatId.value] = messages\n      \n      // 如果是当前会话，更新currentMessages\n      if (currentChatId.value === currentChatId.value) {\n        currentMessages.value = messages\n        scrollToBottom()\n      }\n      \n      // 后台处理AI回复\n      processAIResponse(currentChatId.value, prompt, messages)\n    }\n\n    // 后台处理AI回复\n    const processAIResponse = async (chatId, prompt, messages) => {\n      try {\n        // 用 fetch 处理流\n        const url = axios.getUri({ url: '/planner/chat', params: { prompt, chatId } })\n        const resp = await fetch(url, { method: 'GET' })\n        if (!resp.body) throw new Error('无流式响应')\n        const reader = resp.body.getReader()\n        let aiText = ''\n        \n        // 使用已经创建的AI消息（最后一个消息）\n        const tempMsgIdx = messages.length - 1\n        \n        // 如果是当前会话，更新currentMessages\n        if (chatId === currentChatId.value) {\n          currentMessages.value = messages\n          scrollToBottom()\n        }\n        \n        // 流式处理\n        let reading = true\n        while (reading) {\n          const { done, value } = await reader.read()\n          if (done) {\n            reading = false\n            break\n          }\n          \n          const chunk = new TextDecoder('utf-8').decode(value)\n          aiText += chunk\n          \n          // 更新消息内容\n          messages[tempMsgIdx].text = aiText\n          \n          // 如果是当前会话，更新currentMessages\n          if (chatId === currentChatId.value) {\n            currentMessages.value = messages\n            await nextTick()\n            scrollToBottom()\n          }\n        }\n        \n      } catch (error) {\n        console.error('发送消息失败:', error)\n        // 更新错误消息\n        messages[messages.length - 1].text = '抱歉，服务暂时不可用，请稍后重试。'\n        if (chatId === currentChatId.value) {\n          currentMessages.value = messages\n        }\n      } finally {\n        loading.value = false\n        scrollToBottom()\n        // 刷新会话列表以获取最新的时间\n        await fetchChatList()\n      }\n    }\n    \n\n    \n    // 处理键盘事件\n    const handleKeydown = (e) => {\n      if (e.key === 'Enter') {\n        if (e.shiftKey) {\n          // Shift+Enter: 换行\n          return;\n        } else {\n          // Enter: 发送消息\n          e.preventDefault();\n          send();\n        }\n      }\n    };\n\n    // 自动调整输入框高度\n    const autoResizeInput = (event) => {\n      const textarea = event.target\n      textarea.style.height = 'auto'\n      textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px'\n    }\n    \n    // 滚动到底部\n    const scrollToBottom = async () => {\n      await nextTick()\n      if (messagesContainer.value) {\n        messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight\n      }\n    }\n    \n    // 格式化响应文本\n    const formatResponse = (text) => {\n      if (!text) return ''\n      \n      try {\n        // 使用marked解析markdown\n        return marked(text, {\n          breaks: true, // 支持换行符\n          gfm: true, // 支持GitHub风格的markdown\n          sanitize: false // 允许HTML标签\n        })\n      } catch (error) {\n        console.error('Markdown解析失败:', error)\n        // 如果markdown解析失败，回退到简单的换行符处理\n        return text.replace(/\\n/g, '<br>')\n      }\n    }\n    \n    // 格式化时间\n    const formatTime = (timestamp) => {\n      if (timestamp) {\n        const date = new Date(timestamp)\n        return date.toLocaleDateString() + ' ' + date.toLocaleTimeString()\n      }\n      return ''\n    }\n    \n    // 快捷操作\n    const quickAction = (action) => {\n      let prompt = ''\n      switch (action) {\n        case '天气':\n          prompt = '请帮我查询北京的天气情况'\n          break\n        case '路线':\n          prompt = '请帮我规划从北京站到天安门的路线'\n          break\n        case '景点':\n          prompt = '请推荐北京的一些著名景点'\n          break\n        case '日程':\n          prompt = '请帮我规划一个三天的北京旅游行程'\n          break\n      }\n      input.value = prompt\n    }\n    \n    // 初始化日夜间模式\n    const initDarkMode = () => {\n      isDarkMode.value = document.body.classList.contains('dark')\n    }\n    \n    // 更新日夜间模式\n    const updateDarkMode = () => {\n      isDarkMode.value = document.body.classList.contains('dark')\n    }\n    \n    // 切换头部收缩状态\n    const toggleHeader = () => {\n      isHeaderCollapsed.value = !isHeaderCollapsed.value\n    }\n    \n    // 监听消息变化，自动滚动\n    watch(currentMessages, () => {\n      scrollToBottom()\n    }, { deep: true })\n    \n    return {\n      chatList,\n      currentChatId,\n      input,\n      loading,\n      currentMessages,\n      messagesContainer,\n      isDarkMode,\n      isHeaderCollapsed,\n      newChat,\n      switchChat,\n      send,\n      autoResizeInput,\n      formatResponse,\n      handleKeydown,\n      formatTime,\n      quickAction,\n      toggleHeader,\n      fetchChatList,\n      fetchMessages,\n      processAIResponse\n    }\n  }\n}\n</script>\n\n<style scoped>\n.plan-master-layout {\n  display: flex;\n  height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  transition: all 0.3s ease;\n}\n\n.plan-master-layout.dark-mode {\n  background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n}\n\n.sidebar {\n  width: 300px;\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 100%);\n  backdrop-filter: blur(15px);\n  border-right: 1px solid rgba(255, 255, 255, 0.3);\n  display: flex;\n  flex-direction: column;\n  transition: all 0.3s ease;\n  box-shadow: 2px 0 20px rgba(0, 0, 0, 0.1);\n}\n\n.dark-mode .sidebar {\n  background: linear-gradient(180deg, rgba(44, 62, 80, 0.9) 0%, rgba(52, 73, 94, 0.7) 100%);\n  border-right: 1px solid rgba(255, 255, 255, 0.15);\n  box-shadow: 2px 0 20px rgba(0, 0, 0, 0.3);\n}\n\n.sidebar-header {\n  padding: 25px 20px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);\n  position: relative;\n}\n\n.sidebar-header::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(90deg, #667eea, #764ba2);\n  opacity: 0.6;\n}\n\n.dark-mode .sidebar-header {\n  border-bottom: 1px solid rgba(255, 255, 255, 0.08);\n  background: linear-gradient(135deg, rgba(52, 152, 219, 0.1) 0%, rgba(52, 73, 94, 0.1) 100%);\n}\n\n.dark-mode .sidebar-header::before {\n  background: linear-gradient(90deg, #3498db, #2980b9);\n}\n\n.sidebar-header h2 {\n  margin: 0 0 8px 0;\n  color: #2c3e50;\n  font-size: 20px;\n  font-weight: 700;\n  transition: color 0.3s ease;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.subtitle {\n  margin: 0;\n  color: #7f8c8d;\n  font-size: 13px;\n  transition: color 0.3s ease;\n  font-weight: 500;\n}\n\n.dark-mode .sidebar-header h2 {\n  color: #ecf0f1;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n.dark-mode .subtitle {\n  color: #bdc3c7;\n}\n\n.chat-list {\n  flex: 1;\n  overflow-y: auto;\n  padding: 15px;\n}\n\n.chat-item {\n  padding: 15px;\n  margin-bottom: 10px;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  background: rgba(255, 255, 255, 0.8);\n  color: #2c3e50;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  position: relative;\n  overflow: hidden;\n}\n\n.chat-item::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 3px;\n  height: 100%;\n  background: linear-gradient(180deg, #667eea, #764ba2);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.chat-item:hover {\n  background: rgba(255, 255, 255, 0.95);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  border-color: rgba(102, 126, 234, 0.3);\n}\n\n.chat-item:hover::before {\n  opacity: 1;\n}\n\n.chat-item.active {\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n  border-color: rgba(255, 255, 255, 0.2);\n}\n\n.chat-item.active::before {\n  opacity: 1;\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.dark-mode .chat-item {\n  background: rgba(44, 62, 80, 0.8);\n  color: #ecf0f1;\n  border-color: rgba(255, 255, 255, 0.1);\n}\n\n.dark-mode .chat-item:hover {\n  background: rgba(44, 62, 80, 0.95);\n  border-color: rgba(52, 152, 219, 0.3);\n}\n\n.dark-mode .chat-item.active {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);\n}\n\n.chat-summary {\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 4px;\n}\n\n.chat-time {\n  font-size: 11px;\n  opacity: 0.7;\n  transition: opacity 0.3s ease;\n}\n\n.dark-mode .chat-time {\n  opacity: 0.5;\n}\n\n.new-chat-btn {\n  margin: 15px;\n  padding: 14px 16px;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  border: none;\n  border-radius: 12px;\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n  position: relative;\n  overflow: hidden;\n}\n\n.new-chat-btn::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s ease;\n}\n\n.new-chat-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);\n}\n\n.new-chat-btn:hover::before {\n  left: 100%;\n}\n\n.dark-mode .new-chat-btn {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);\n}\n\n.dark-mode .new-chat-btn:hover {\n  box-shadow: 0 6px 16px rgba(52, 152, 219, 0.4);\n}\n\n.chat-main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n}\n\n.dark-mode .chat-main {\n  background: rgba(44, 62, 80, 0.95);\n}\n\n.chat-header {\n  padding: 20px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  text-align: center;\n  transition: all 0.3s ease;\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.chat-header.collapsed {\n  padding: 5px 20px;\n  min-height: 10px;\n  max-height: 40px;\n}\n\n.dark-mode .chat-header {\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.header-content {\n  flex: 1;\n  text-align: center;\n  transition: all 0.3s ease;\n  overflow: hidden;\n  max-height: 200px;\n}\n\n.chat-header.collapsed .header-content {\n  opacity: 0;\n  max-height: 0;\n  margin: 0;\n  padding: 0;\n}\n\n.collapse-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  color: #667eea;\n  padding: 8px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  right: 20px;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 10;\n}\n\n.collapse-btn:hover {\n  background: rgba(102, 126, 234, 0.1);\n  transform: translateY(-50%) scale(1.1);\n}\n\n.dark-mode .collapse-btn {\n  color: #3498db;\n}\n\n.dark-mode .collapse-btn:hover {\n  background: rgba(52, 152, 219, 0.2);\n}\n\n.chat-header h1 {\n  margin: 0 0 10px 0;\n  color: #333;\n  font-size: 24px;\n  font-weight: 600;\n  transition: color 0.3s ease;\n}\n\n.dark-mode .chat-header h1 {\n  color: #ecf0f1;\n}\n\n.features {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.feature-tag {\n  padding: 4px 12px;\n  background: #667eea;\n  color: white;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.dark-mode .feature-tag {\n  background: #3498db;\n}\n\n.chat-window {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.message {\n  display: flex;\n  gap: 12px;\n  max-width: 80%;\n}\n\n.message.user {\n  align-self: flex-end;\n  flex-direction: row-reverse;\n}\n\n.message.assistant {\n  align-self: flex-start;\n}\n\n.message-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 20px;\n  flex-shrink: 0;\n}\n\n.user-avatar {\n  background: #667eea;\n  color: white;\n}\n\n.ai-avatar {\n  background: #764ba2;\n  color: white;\n}\n\n.message-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.user-message {\n  background: #667eea;\n  color: white;\n  padding: 12px 16px;\n  border-radius: 18px 18px 4px 18px;\n  word-wrap: break-word;\n}\n\n.ai-response {\n  background: #f8f9fa;\n  border: 1px solid #e9ecef;\n  padding: 16px;\n  border-radius: 18px 18px 18px 4px;\n  word-wrap: break-word;\n  transition: all 0.3s ease;\n}\n\n.response-text {\n  line-height: 1.6;\n  color: #333;\n  transition: color 0.3s ease;\n}\n\n.dark-mode .ai-response {\n  background: #34495e;\n  border: 1px solid #2c3e50;\n}\n\n.dark-mode .response-text {\n  color: #ecf0f1;\n}\n\n.loading-dots {\n  display: flex;\n  gap: 4px;\n  padding: 16px;\n}\n\n.dot {\n  width: 8px;\n  height: 8px;\n  background: #667eea;\n  border-radius: 50%;\n  animation: bounce 1.4s infinite ease-in-out both;\n  transition: background-color 0.3s ease;\n}\n\n.dot:nth-child(1) { animation-delay: -0.32s; }\n.dot:nth-child(2) { animation-delay: -0.16s; }\n\n.dark-mode .dot {\n  background: #3498db;\n}\n\n@keyframes bounce {\n  0%, 80%, 100% {\n    transform: scale(0);\n  }\n  40% {\n    transform: scale(1);\n  }\n}\n\n.input-bar {\n  padding: 20px;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  background: rgba(255, 255, 255, 0.9);\n  transition: all 0.3s ease;\n}\n\n.dark-mode .input-bar {\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n  background: rgba(44, 62, 80, 0.9);\n}\n\n.input-wrapper {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 15px;\n}\n\n.input-auto {\n  flex: 1;\n  padding: 12px 16px;\n  border: 2px solid #e9ecef;\n  border-radius: 25px;\n  font-size: 14px;\n  outline: none;\n  transition: all 0.3s ease;\n  max-height: 120px;\n  min-height: 48px;\n  background: white;\n  color: #333;\n}\n\n.input-auto:focus {\n  border-color: #667eea;\n}\n\n.input-auto:disabled {\n  background: #f8f9fa;\n  cursor: not-allowed;\n}\n\n.dark-mode .input-auto {\n  background: #34495e;\n  border-color: #2c3e50;\n  color: #ecf0f1;\n}\n\n.dark-mode .input-auto:focus {\n  border-color: #3498db;\n}\n\n.dark-mode .input-auto:disabled {\n  background: #2c3e50;\n  color: #95a5a6;\n}\n\n.dark-mode .input-auto::placeholder {\n  color: #95a5a6;\n}\n\n.send-btn {\n  padding: 12px 24px;\n  background: #667eea;\n  color: white;\n  border: none;\n  border-radius: 25px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  white-space: nowrap;\n}\n\n.send-btn:hover:not(:disabled) {\n  background: #5a6fd8;\n  transform: translateY(-1px);\n}\n\n.send-btn:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.dark-mode .send-btn {\n  background: #3498db;\n}\n\n.dark-mode .send-btn:hover:not(:disabled) {\n  background: #2980b9;\n}\n\n.dark-mode .send-btn:disabled {\n  background: #7f8c8d;\n}\n\n.quick-actions {\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.quick-btn {\n  padding: 8px 16px;\n  background: rgba(102, 126, 234, 0.1);\n  color: #667eea;\n  border: 1px solid rgba(102, 126, 234, 0.3);\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.quick-btn:hover {\n  background: rgba(102, 126, 234, 0.2);\n  transform: translateY(-1px);\n}\n\n.dark-mode .quick-btn {\n  background: rgba(52, 152, 219, 0.2);\n  color: #3498db;\n  border: 1px solid rgba(52, 152, 219, 0.4);\n}\n\n.dark-mode .quick-btn:hover {\n  background: rgba(52, 152, 219, 0.3);\n}\n\n/* Markdown样式 */\n.response-text {\n  line-height: 1.6;\n}\n\n.response-text h1,\n.response-text h2,\n.response-text h3,\n.response-text h4,\n.response-text h5,\n.response-text h6 {\n  margin: 16px 0 8px 0;\n  font-weight: 600;\n  color: #2c3e50;\n}\n\n.dark-mode .response-text h1,\n.dark-mode .response-text h2,\n.dark-mode .response-text h3,\n.dark-mode .response-text h4,\n.dark-mode .response-text h5,\n.dark-mode .response-text h6 {\n  color: #ecf0f1;\n}\n\n.response-text h1 { font-size: 1.5em; }\n.response-text h2 { font-size: 1.3em; }\n.response-text h3 { font-size: 1.1em; }\n\n.response-text p {\n  margin: 8px 0;\n}\n\n.response-text ul,\n.response-text ol {\n  margin: 8px 0;\n  padding-left: 20px;\n}\n\n.response-text li {\n  margin: 4px 0;\n}\n\n.response-text strong,\n.response-text b {\n  font-weight: 600;\n  color: #667eea;\n}\n\n.dark-mode .response-text strong,\n.dark-mode .response-text b {\n  color: #3498db;\n}\n\n.response-text em,\n.response-text i {\n  font-style: italic;\n}\n\n.response-text code {\n  background: rgba(102, 126, 234, 0.1);\n  padding: 2px 6px;\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n  font-size: 0.9em;\n  color: #667eea;\n}\n\n.dark-mode .response-text code {\n  background: rgba(52, 152, 219, 0.2);\n  color: #3498db;\n}\n\n.response-text pre {\n  background: rgba(102, 126, 234, 0.05);\n  padding: 12px;\n  border-radius: 8px;\n  overflow-x: auto;\n  margin: 12px 0;\n  border: 1px solid rgba(102, 126, 234, 0.1);\n}\n\n.dark-mode .response-text pre {\n  background: rgba(52, 152, 219, 0.1);\n  border: 1px solid rgba(52, 152, 219, 0.2);\n}\n\n.response-text pre code {\n  background: none;\n  padding: 0;\n  color: inherit;\n}\n\n.response-text blockquote {\n  border-left: 4px solid #667eea;\n  padding-left: 16px;\n  margin: 12px 0;\n  color: #7f8c8d;\n  font-style: italic;\n}\n\n.dark-mode .response-text blockquote {\n  border-left-color: #3498db;\n  color: #bdc3c7;\n}\n\n.response-text table {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 12px 0;\n}\n\n.response-text th,\n.response-text td {\n  border: 1px solid rgba(102, 126, 234, 0.2);\n  padding: 8px 12px;\n  text-align: left;\n}\n\n.dark-mode .response-text th,\n.dark-mode .response-text td {\n  border-color: rgba(52, 152, 219, 0.3);\n}\n\n.response-text th {\n  background: rgba(102, 126, 234, 0.1);\n  font-weight: 600;\n}\n\n.dark-mode .response-text th {\n  background: rgba(52, 152, 219, 0.2);\n}\n\n.response-text a {\n  color: #667eea;\n  text-decoration: none;\n}\n\n.dark-mode .response-text a {\n  color: #3498db;\n}\n\n.response-text a:hover {\n  text-decoration: underline;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .plan-master-layout {\n    flex-direction: column;\n  }\n  \n  .sidebar {\n    width: 100%;\n    height: 200px;\n  }\n  \n  .chat-main {\n    height: calc(100vh - 200px);\n  }\n  \n  .message {\n    max-width: 95%;\n  }\n  \n  .features {\n    gap: 5px;\n  }\n  \n  .feature-tag {\n    font-size: 10px;\n    padding: 3px 8px;\n  }\n}\n</style> ","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults<ParserOutput = string, RendererOutput = string>(): MarkedOptions<ParserOutput, RendererOutput> {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport let _defaults: MarkedOptions<any, any> = _getDefaults();\n\nexport function changeDefaults<ParserOutput = string, RendererOutput = string>(newDefaults: MarkedOptions<ParserOutput, RendererOutput>) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<(?! )[^<>]*?>/g;\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer<ParserOutput, RendererOutput>; // set by the lexer\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer<ParserOutput = string, RendererOutput = string> {\n  tokens: TokensList;\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer<ParserOutput, RendererOutput>;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  parser!: _Parser<ParserOutput, RendererOutput>; // set by the parser\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): RendererOutput {\n    return '' as RendererOutput;\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): RendererOutput {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n' as RendererOutput;\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n' as RendererOutput;\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): RendererOutput {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n` as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): RendererOutput {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n` as RendererOutput;\n  }\n\n  hr(token: Tokens.Hr): RendererOutput {\n    return '<hr>\\n' as RendererOutput;\n  }\n\n  list(token: Tokens.List): RendererOutput {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n' as RendererOutput;\n  }\n\n  listitem(item: Tokens.ListItem): RendererOutput {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n` as RendererOutput;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): RendererOutput {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">' as RendererOutput;\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): RendererOutput {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n` as RendererOutput;\n  }\n\n  table(token: Tokens.Table): RendererOutput {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell as ParserOutput });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell as ParserOutput });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n' as RendererOutput;\n  }\n\n  tablerow({ text }: Tokens.TableRow<ParserOutput>): RendererOutput {\n    return `<tr>\\n${text}</tr>\\n` as RendererOutput;\n  }\n\n  tablecell(token: Tokens.TableCell): RendererOutput {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n` as RendererOutput;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): RendererOutput {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>` as RendererOutput;\n  }\n\n  em({ tokens }: Tokens.Em): RendererOutput {\n    return `<em>${this.parser.parseInline(tokens)}</em>` as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return `<code>${escape(text, true)}</code>` as RendererOutput;\n  }\n\n  br(token: Tokens.Br): RendererOutput {\n    return '<br>' as RendererOutput;\n  }\n\n  del({ tokens }: Tokens.Del): RendererOutput {\n    return `<del>${this.parser.parseInline(tokens)}</del>` as RendererOutput;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): RendererOutput {\n    const text = this.parser.parseInline(tokens) as string;\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text as RendererOutput;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out as RendererOutput;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): RendererOutput {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer) as string;\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text) as RendererOutput;\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out as RendererOutput;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape): RendererOutput {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens) as unknown as RendererOutput\n      : ('escaped' in token && token.escaped ? token.text as RendererOutput : escape(token.text) as RendererOutput);\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer<RendererOutput = string> {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  em({ text }: Tokens.Em): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  del({ text }: Tokens.Del): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  link({ text }: Tokens.Link): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  image({ text }: Tokens.Image): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  br(): RendererOutput {\n    return '' as RendererOutput;\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  renderer: _Renderer<ParserOutput, RendererOutput>;\n  textRenderer: _TextRenderer<RendererOutput>;\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer<ParserOutput, RendererOutput>();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer<RendererOutput>();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken) as string;\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += ('\\n' + this.renderer.text(textToken));\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out as ParserOutput;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer<ParserOutput, RendererOutput> | _TextRenderer<RendererOutput> = this.renderer): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out as ParserOutput;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: ParserOutput) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse<ParserOutput, RendererOutput> : _Parser.parseInline<ParserOutput, RendererOutput>;\n  }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked<ParserOutput = string, RendererOutput = string> {\n  defaults = _getDefaults<ParserOutput, RendererOutput>();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser<ParserOutput, RendererOutput>;\n  Renderer = _Renderer<ParserOutput, RendererOutput>;\n  TextRenderer = _TextRenderer<RendererOutput>;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer<ParserOutput, RendererOutput>;\n  Hooks = _Hooks<ParserOutput, RendererOutput>;\n\n  constructor(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    const extensions: MarkedOptions<ParserOutput, RendererOutput>['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions<ParserOutput, RendererOutput>;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer<ParserOutput, RendererOutput>, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return (ret || '') as RendererOutput;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer<ParserOutput, RendererOutput>, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks<ParserOutput, RendererOutput>();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks<ParserOutput, RendererOutput>, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Parser.parse<ParserOutput, RendererOutput>(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: true }): Promise<ParserOutput>;\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: false }): ParserOutput;\n      (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): ParserOutput | Promise<ParserOutput>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n      const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch(e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n","import { render } from \"./PlanMaster.vue?vue&type=template&id=82967542&scoped=true\"\nimport script from \"./PlanMaster.vue?vue&type=script&lang=js\"\nexport * from \"./PlanMaster.vue?vue&type=script&lang=js\"\n\nimport \"./PlanMaster.vue?vue&type=style&index=0&id=82967542&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-82967542\"]])\n\nexport default __exports__"],"names":["class","ref","_createElementBlock","_normalizeClass","$setup","isDarkMode","_createElementVNode","_hoisted_1","_hoisted_2","_Fragment","_renderList","chatList","chat","key","chatId","currentChatId","onClick","$event","switchChat","_hoisted_4","_toDisplayString","summary","_hoisted_5","formatTime","createTime","_cache","args","newChat","_hoisted_6","isHeaderCollapsed","toggleHeader","title","_hoisted_7","_hoisted_8","_hoisted_9","currentMessages","msg","idx","role","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","text","loading","length","_hoisted_16","_hoisted_17","innerHTML","formatResponse","_hoisted_19","_hoisted_20","input","onInput","autoResizeInput","onKeydown","handleKeydown","placeholder","disabled","rows","style","_hoisted_22","send","trim","_hoisted_24","_hoisted_25","_hoisted_26","quickAction","_typeof","o","Symbol","iterator","constructor","prototype","toPrimitive","t","r","e","i","call","TypeError","String","Number","toPropertyKey","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","L","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","O","H","l","E","exec","h","source","n","replace","s","m","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","xe","be","Re","C","Oe","j","se","ie","Te","F","we","Q","ye","Pe","v","U","Se","oe","$e","K","blockquote","code","def","fences","heading","hr","html","lheading","list","newline","paragraph","table","re","_e","Le","Me","ze","ae","Ae","D","X","le","Ee","ue","Ce","Ie","Be","pe","qe","ve","ce","De","Ze","Ge","He","Ne","je","Fe","q","Qe","he","de","Ue","W","_backpedal","anyPunctuation","autolink","blockSkip","br","del","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","escape","link","nolink","punctuation","reflink","reflinkSearch","tag","url","Ke","N","Xe","I","normal","M","We","ke","w","test","J","encodeURI","V","a","u","split","shift","at","pop","splice","push","z","charAt","slice","ge","indexOf","fe","href","other","state","inLink","type","raw","tokens","inlineTokens","Je","match","map","join","y","this","options","space","rules","block","codeBlockStyle","lang","inline","depth","lexer","p","c","f","top","blockTokens","k","x","g","T","substring","ordered","start","loose","items","Z","repeat","trimStart","search","ee","te","ne","me","A","G","Y","task","checked","trimEnd","filter","some","pre","toLowerCase","header","align","inRawBlock","emStrong","lastIndex","index","codespan","inlineText","escaped","b","links","create","inlineQueue","lex","lexInline","src","startBlock","forEach","charCodeAt","console","error","Error","keys","includes","lastIndexOf","startInline","P","parser","parse","parseInline","listitem","checkbox","unshift","tablecell","tablerow","strong","em","image","textRenderer","S","R","renderers","$","_Class3","preprocess","postprocess","processAllTokens","provideLexer","provideParser","Set","B","setOptions","parseMarkdown","use","concat","defaults","childTokens","flat","name","apply","level","passThroughHooks","has","Promise","resolve","then","onError","toString","all","catch","message","reject","_","d","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","genId","Date","now","random","setup","messagesContainer","chatMessages","onMounted","fetchChatList","initDarkMode","observer","MutationObserver","updateDarkMode","observe","document","body","attributes","attributeFilter","resp","axios","get","chatIdsWithTime","data","chatListWithTitles","entries","messagesResp","messages","lastUpdateTime","firstUserMessage","find","content","sort","fetchMessages","scrollToBottom","newId","prompt","currentTime","currentChat","processAIResponse","getUri","params","fetch","method","reader","getReader","aiText","tempMsgIdx","reading","done","read","chunk","TextDecoder","decode","nextTick","shiftKey","preventDefault","event","textarea","target","height","scrollHeight","scrollTop","marked","sanitize","timestamp","date","toLocaleDateString","toLocaleTimeString","action","classList","contains","watch","deep","__exports__","render"],"sourceRoot":""}