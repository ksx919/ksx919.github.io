{"version":3,"file":"js/701.54ed4879.js","mappings":"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","sources":["webpack://aihub/./src/views/ChatAI.vue","webpack://aihub/./src/views/ChatAI.vue?0476"],"sourcesContent":["<template>\n  <div class=\"chat-ai-layout\">\n    <aside class=\"sidebar\">\n      <div class=\"sidebar-header\">\n        <h2>AI聊天</h2>\n        <p class=\"subtitle\">智能对话助手</p>\n      </div>\n      <div class=\"chat-list\">\n        <div\n          v-for=\"chat in chatList\"\n          :key=\"chat.chatId\"\n          :class=\"['chat-item', chat.chatId === currentChatId ? 'active' : '']\"\n          @click=\"switchChat(chat.chatId)\"\n        >\n          <div class=\"chat-summary\">\n            {{ chat.summary || '（空会话）' }}\n          </div>\n          <div class=\"chat-time\">{{ formatTime(chat.createTime) }}</div>\n        </div>\n      </div>\n      <button class=\"new-chat-btn\" @click=\"newChat\">+ 新建会话</button>\n    </aside>\n    <main class=\"chat-main\">\n      <div class=\"chat-header\" :class=\"{ 'collapsed': isHeaderCollapsed }\">\n        <div class=\"header-content\">\n          <h1>AI聊天助手</h1>\n          <div class=\"features\">\n            <span class=\"feature-tag\">智能对话</span>\n            <span class=\"feature-tag\">知识问答</span>\n            <span class=\"feature-tag\">深度思考</span>\n            <span class=\"feature-tag\">创意写作</span>\n          </div>\n        </div>\n        <button class=\"collapse-btn\" @click=\"toggleHeader\" :title=\"isHeaderCollapsed ? '展开标题' : '收起标题'\">\n          {{ isHeaderCollapsed ? '▼' : '▲' }}\n        </button>\n      </div>\n      <div class=\"chat-window\">\n        <div class=\"messages\">\n          <div v-for=\"(msg, idx) in currentMessages\" :key=\"idx\" :class=\"['message', msg.role]\">\n            <div class=\"message-avatar\">\n              <div v-if=\"msg.role === 'user'\" class=\"user-avatar\">👤</div>\n              <div v-else class=\"ai-avatar\">🤖</div>\n            </div>\n            <div class=\"message-content\">\n              <!-- 用户消息 -->\n              <template v-if=\"msg.role === 'user'\">\n                <div class=\"user-message\">\n                  <span class=\"text\">{{ msg.text }}</span>\n                </div>\n              </template>\n              \n              <!-- AI消息 -->\n              <template v-else>\n                <div class=\"ai-message-container\">\n                  <!-- 思考过程部分 -->\n                  <div v-if=\"msg.think\" class=\"ai-think\">\n                    <div class=\"ai-think-header\" @click=\"toggleThink(idx)\">\n                      <span class=\"think-toggle\">{{ thinkStates[idx] ? '▼' : '▶' }}</span>\n                      {{ (isThinking && idx === currentMessages.length - 1 && loading) ? '思考中' : '思考过程' }}\n                      <span v-if=\"isThinking && idx === currentMessages.length - 1 && loading\" class=\"thinking-dot\"></span>\n                    </div>\n                    <!-- 默认展开思考内容 -->\n                    <div v-show=\"thinkStates[idx] !== false\" class=\"ai-think-content\">{{ msg.think }}</div>\n                  </div>\n                  \n                  <!-- 加载动画，当这是最后一条消息且正在加载时显示 -->\n                  <div v-if=\"loading && idx === currentMessages.length - 1 && !msg.text && !msg.think\" class=\"loading-dots\">\n                    <span class=\"dot\"></span>\n                    <span class=\"dot\"></span>\n                    <span class=\"dot\"></span>\n                  </div>\n                  \n                  <!-- 最终回复部分 -->\n                  <div v-if=\"msg.text\" class=\"ai-response\">\n                    <div class=\"response-text\" v-html=\"formatResponse(msg.text)\"></div>\n                  </div>\n                </div>\n              </template>\n            </div>\n          </div>\n          \n        </div>\n        <div class=\"input-bar\">\n          <div class=\"input-wrapper\">\n          <textarea\n            v-model=\"input\"\n            @input=\"autoResizeInput\"\n            @keydown=\"handleKeydown\"\n            placeholder=\"请输入您的问题或想法...\"\n            :disabled=\"loading\"\n            class=\"input-auto textarea-auto\"\n            rows=\"1\"\n            style=\"resize:none;overflow:hidden;\"\n          />\n            <div class=\"input-actions\">\n              <button class=\"send-btn\" @click=\"send\" :disabled=\"loading || !input.trim()\">\n                <span v-if=\"loading\">发送中...</span>\n                <span v-else>发送</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\nimport { ref, watch, onMounted } from 'vue'\nimport axios from 'axios'\n\nfunction genId() {\n  return 'chat_' + Date.now() + '_' + Math.random().toString(36).slice(2, 8)\n}\n\nexport default {\n  name: 'ChatAI',\n  setup() {\n    const chatList = ref([])\n    const currentChatId = ref('')\n    const input = ref('')\n    const loading = ref(false)\n    const streamingText = ref('')\n    const thinkStates = ref({})\n    const isThinking = ref(false)\n    const thinkingContent = ref('')\n    const showThinkingContent = ref(true) // 思考内容默认展开\n    const isThinkingComplete = ref(false)\n    const currentMessages = ref([])\n    const isHeaderCollapsed = ref(false)\n    \n    // 为每个会话维护独立的消息和状态\n    const sessionMessages = ref({}) // { chatId: messages[] }\n    const sessionLoading = ref({}) // { chatId: boolean }\n    const sessionStreaming = ref({}) // { chatId: string }\n    const sessionThinkStates = ref({}) // { chatId: { msgIndex: boolean } }\n\n    // 获取会话列表\n    const fetchChatList = async () => {\n      try {\n        const resp = await axios.get('/ai/history/chat/with-time')\n        // {chatId: createTime} 映射\n        const chatIdsWithTime = resp.data\n        const chatListWithTitles = []\n        \n        // 为每个会话获取第一条消息作为标题\n        for (const [chatId, createTime] of Object.entries(chatIdsWithTime)) {\n          try {\n            const messagesResp = await axios.get(`/ai/history/chat/${chatId}`)\n            const messages = messagesResp.data\n            let title = '（空会话）'\n            \n            // 找到第一条用户消息作为标题\n            const firstUserMessage = messages.find(msg => msg.role === 'user')\n            if (firstUserMessage && firstUserMessage.content) {\n              title = firstUserMessage.content.slice(0, 20) + (firstUserMessage.content.length > 20 ? '...' : '')\n            }\n            \n            chatListWithTitles.push({ \n              chatId, \n              summary: title,\n              createTime: createTime\n            })\n          } catch (error) {\n            // 如果获取消息失败，使用默认标题\n            chatListWithTitles.push({ \n              chatId, \n              summary: '（空会话）',\n              createTime: createTime\n            })\n          }\n        }\n        \n        // 按创建时间排序，最新的在前面\n        chatListWithTitles.sort((a, b) => b.createTime - a.createTime)\n        \n        chatList.value = chatListWithTitles\n        // 自动选中第一个\n        if (chatList.value.length > 0 && !currentChatId.value) {\n          currentChatId.value = chatList.value[0].chatId\n        }\n      } catch (error) {\n        console.error('获取会话列表失败:', error)\n      }\n    }\n\n    // 获取当前会话消息\n    const fetchMessages = async (chatId) => {\n      if (!chatId) return\n      const resp = await axios.get(`/ai/history/chat/${chatId}`)\n      // resp.data: [{role, content}]\n      // 兼容原有结构\n      const messages = resp.data.map(msg => {\n        // 兼容AI思考过程（如果content里有<think>标签）\n        if (msg.role === 'assistant' && msg.content && msg.content.includes('<think>')) {\n          const thinkMatch = msg.content.match(/<think>([\\s\\S]*?)<\\/think>/)\n          return {\n            role: 'ai',\n            text: msg.content.replace(/<think>[\\s\\S]*?<\\/think>/, '').trim(),\n            think: thinkMatch ? thinkMatch[1].trim() : ''\n          }\n        } else if (msg.role === 'assistant') {\n          return { role: 'ai', text: msg.content, think: '' }\n        } else {\n          return { role: 'user', text: msg.content }\n        }\n      })\n      \n      // 更新会话消息\n      sessionMessages.value[chatId] = messages\n      // 如果是当前会话，更新currentMessages\n      if (chatId === currentChatId.value) {\n        currentMessages.value = messages\n                  // 为有思考过程的消息设置默认展开状态\n        const thinkStatesForChat = {}\n        messages.forEach((msg, idx) => {\n          if (msg.think) {\n            thinkStatesForChat[idx] = true // 默认展开\n          }\n        })\n        sessionThinkStates.value[chatId] = thinkStatesForChat\n        thinkStates.value = thinkStatesForChat\n        // 滚动到底部\n        scrollToBottom()\n      }\n    }\n\n    // 新建会话\n    const newChat = async () => {\n      const id = genId()\n      currentChatId.value = id\n      sessionMessages.value[id] = []\n      currentMessages.value = []\n      // 不立即添加到聊天列表，等发送消息时再添加\n    }\n\n    // 切换会话\n    const switchChat = async (id) => {\n      currentChatId.value = id\n      // 如果会话消息已存在，直接使用\n      if (sessionMessages.value[id]) {\n        currentMessages.value = sessionMessages.value[id]\n        thinkStates.value = sessionThinkStates.value[id] || {}\n        // 检查当前会话是否正在思考中 - 只有在真正思考中且未完成时才显示\n        const isCurrentlyThinking = sessionLoading.value[id] && \n          sessionStreaming.value[id] && \n          sessionStreaming.value[id].includes('<think>') && \n          !sessionStreaming.value[id].includes('</think>')\n        isThinking.value = isCurrentlyThinking\n        streamingText.value = sessionStreaming.value[id] || ''\n        // 滚动到底部\n        scrollToBottom()\n      } else {\n        // 否则从后端获取\n        await fetchMessages(id)\n        // 新获取的会话不会有思考状态\n        isThinking.value = false\n        streamingText.value = ''\n      }\n    }\n\n    // 滚动到底部函数\n    const scrollToBottom = () => {\n      setTimeout(() => {\n        const messagesEl = document.querySelector('.messages')\n        if (messagesEl) {\n          messagesEl.scrollTop = messagesEl.scrollHeight\n        }\n      }, 10)\n    }\n    \n    // 切换头部收缩状态\n    const toggleHeader = () => {\n      isHeaderCollapsed.value = !isHeaderCollapsed.value\n    }\n    \n    // 格式化时间\n    const formatTime = (timestamp) => {\n      if (timestamp) {\n        const date = new Date(timestamp)\n        return date.toLocaleDateString() + ' ' + date.toLocaleTimeString()\n      }\n      return ''\n    }\n    \n    // 格式化响应文本\n    const formatResponse = (text) => {\n      if (!text) return ''\n      // 简单的换行符处理\n      return text.replace(/\\n/g, '<br>')\n    }\n\n    // 发送消息（支持后台处理）\n    const send = async () => {\n      if (!input.value.trim() || loading.value) return\n      \n      const chatId = currentChatId.value\n      // 确保 chatId 存在，如果不存在则生成一个新的\n      if (!chatId) {\n        const newId = genId()\n        currentChatId.value = newId\n        sessionMessages.value[newId] = []\n      }\n      \n      const prompt = input.value\n      input.value = ''\n      // 设置当前会话为加载状态\n      sessionLoading.value[currentChatId.value] = true\n      loading.value = true\n      \n      // 获取当前会话的消息列表\n      let messages = sessionMessages.value[currentChatId.value] || []\n      \n      // 如果是第一条消息，先添加到聊天列表\n      if (messages.length === 0) {\n        const currentTime = Date.now()\n        chatList.value.unshift({ \n          chatId: currentChatId.value, \n          summary: prompt.slice(0, 20) + (prompt.length > 20 ? '...' : ''),\n          createTime: currentTime\n        })\n      } else {\n        // 如果不是第一条消息，更新会话时间\n        const currentChat = chatList.value.find(c => c.chatId === currentChatId.value)\n        if (currentChat) {\n          currentChat.createTime = Date.now()\n        }\n      }\n      \n      // 先添加用户消息到界面\n      messages.push({ role: 'user', text: prompt })\n      sessionMessages.value[currentChatId.value] = messages\n      \n      // 立即创建一个空的AI消息，显示\"AI：\"，避免卡顿感\n      messages.push({ role: 'ai', text: '', think: '' })\n      sessionMessages.value[currentChatId.value] = messages\n      \n      // 如果是当前会话，更新currentMessages\n      if (currentChatId.value === currentChatId.value) {\n        currentMessages.value = messages\n        // 滚动到底部\n        scrollToBottom()\n      }\n      \n      // 后台处理AI回复\n      processAIResponse(currentChatId.value, prompt, messages)\n    }\n\n    // 后台处理AI回复\n    const processAIResponse = async (chatId, prompt, messages) => {\n      try {\n        // 用 fetch 处理流\n        const url = axios.getUri({ url: '/ai/chat', params: { prompt, chatId } })\n        const resp = await fetch(url, { method: 'GET' })\n        if (!resp.body) throw new Error('无流式响应')\n        const reader = resp.body.getReader()\n        let aiText = ''\n        let inThinkingMode = false\n        let thinkingCompleted = false\n        \n        // 初始化会话状态\n        sessionStreaming.value[chatId] = ''\n        sessionThinkStates.value[chatId] = sessionThinkStates.value[chatId] || {}\n        \n        // 使用已经创建的AI消息（最后一个消息）\n        const tempMsgIdx = messages.length -1\n        // 默认展开思考过程\n        sessionThinkStates.value[chatId][tempMsgIdx] = true // 确保思考过程默认展开\n        \n        // 如果是当前会话，更新currentMessages\n        if (chatId === currentChatId.value) {\n          currentMessages.value = messages\n          // 滚动到底部\n          scrollToBottom()\n        }\n        \n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const { done, value } = await reader.read()\n          if (done) break\n          const chunk = new TextDecoder('utf-8').decode(value)\n          aiText += chunk\n          sessionStreaming.value[chatId] = aiText\n          \n          // 检查是否进入思考模式\n          if (aiText.includes('<think>') && !inThinkingMode && !thinkingCompleted) {\n            inThinkingMode = true\n            const thinkStartIndex = aiText.indexOf('<think>') + '<think>'.length\n            const thinkingContent = aiText.substring(thinkStartIndex).trim()\n            messages[tempMsgIdx].think = thinkingContent\n            // 流式时正式回答区域不显示思考内容\n            messages[tempMsgIdx].text = ''\n          }\n          // 检查是否结束思考模式\n          else if (inThinkingMode && aiText.includes('</think>')) {\n            inThinkingMode = false\n            thinkingCompleted = true\n            const thinkMatch = aiText.match(/<think>([\\s\\S]*?)<\\/think>/)\n            if (thinkMatch) {\n              messages[tempMsgIdx].think = thinkMatch[1].trim()\n            }\n            // 只显示<think>...</think>之后的内容\n            let cleanedText = aiText.split(/<think>[\\s\\S]*?<\\/think>/)[1] || ''\n            cleanedText = cleanedText.replace(/<think>|<\\/think>/g, '').trim()\n            cleanedText = cleanedText.replace(/\\n\\s*\\n/g, '\\n').trim()\n            messages[tempMsgIdx].text = cleanedText\n          } \n          // 在思考模式中更新内容\n          else if (inThinkingMode && !thinkingCompleted) {\n            const thinkStartIndex = aiText.indexOf('<think>') + '<think>'.length\n            const thinkingContent = aiText.substring(thinkStartIndex).trim()\n            messages[tempMsgIdx].think = thinkingContent\n            // 流式时正式回答区域不显示思考内容\n            messages[tempMsgIdx].text = ''\n          } \n          // 思考完成后或没有思考过程，直接更新文本\n          else {\n            // 只显示<think>...</think>之后的内容（如果有），否则全部内容\n            if (aiText.includes('<think>') && aiText.includes('</think>')) {\n              let cleanedText = aiText.split(/<think>[\\s\\S]*?<\\/think>/)[1] || ''\n              cleanedText = cleanedText.replace(/<think>|<\\/think>/g, '').trim()\n              cleanedText = cleanedText.replace(/\\n\\s*\\n/g, '\\n').trim()\n              messages[tempMsgIdx].text = cleanedText\n          } else {\n              let cleanedText = aiText.replace(/<think>[\\s\\S]*?<\\/think>/g, '').trim()\n              cleanedText = cleanedText.replace(/<think>|<\\/think>/g, '').trim()\n              cleanedText = cleanedText.replace(/\\n\\s*\\n/g, '\\n').trim()\n              messages[tempMsgIdx].text = cleanedText\n            }\n          }\n          \n          // 更新会话消息\n          sessionMessages.value[chatId] = [...messages]\n          \n          // 如果是当前会话，更新currentMessages并滚动\n          if (chatId === currentChatId.value) {\n            currentMessages.value = [...messages]\n            // 更新全局思考状态用于UI显示 - 只有在真正思考中时才显示\n            isThinking.value = inThinkingMode && !thinkingCompleted\n            streamingText.value = aiText\n            // 滚动到底部\n            scrollToBottom()\n            }\n        }\n        \n        // 解析AI回复中的思考过程\n        let thinkContent = ''\n        let finalText = aiText\n        \n        // 彻底清理所有<think>标签及其内容，并确保msg.text只显示正式回复\n        const thinkMatch = aiText.match(/<think>([\\s\\S]*?)<\\/think>/)\n        if (thinkMatch) {\n          thinkContent = thinkMatch[1].trim()\n          // 只取<think>...</think>之后的内容作为正式回复\n          const afterThink = aiText.split(/<think>[\\s\\S]*?<\\/think>/)[1]\n          finalText = afterThink ? afterThink.trim() : ''\n        } else {\n          // 没有思考标签，全部内容为正式回复\n          finalText = aiText.trim()\n        }\n        // 额外清理残留标签\n        finalText = finalText.replace(/<think>|<\\/think>/g, '').trim()\n        // 清理多余空行\n        finalText = finalText.replace(/\\n\\s*\\n/g, '\\n').trim()\n        \n        messages[tempMsgIdx] = {\n          role: 'ai',\n          text: finalText,\n          think: thinkContent\n        }\n        \n        sessionMessages.value[chatId] = [...messages]\n        if (thinkContent) {\n          // 默认展开思考过程\n          sessionThinkStates.value[chatId][tempMsgIdx] = true // 确保思考过程默认展开\n        }\n        \n        // 如果是当前会话，更新currentMessages\n        if (chatId === currentChatId.value) {\n          currentMessages.value = [...messages]\n          // 思考完成后，确保不显示思考中状态\n          isThinking.value = false\n          streamingText.value = ''\n          // 滚动到底部\n          scrollToBottom()\n        }\n        \n        // 发送后刷新会话列表以获取最新的时间\n        await fetchChatList()\n      } catch (e) {\n        const errorMsgIdx = messages.length -1\n        messages[errorMsgIdx] = { role: 'ai', text: '[AI流式异常] ' + e.message, think: '' }\n        sessionMessages.value[chatId] = [...messages]\n        if (chatId === currentChatId.value) {\n          currentMessages.value = [...messages]\n          // 滚动到底部\n          scrollToBottom()\n        }\n      } finally {\n        // 清除会话状态\n        sessionLoading.value[chatId] = false\n        sessionStreaming.value[chatId] = ''\n        // 如果是当前会话，清除全局状态\n        if (chatId === currentChatId.value) {\n        loading.value = false\n        streamingText.value = ''\n        isThinking.value = false\n        isThinkingComplete.value = false\n        thinkingContent.value = ''\n          showThinkingContent.value = true\n        }\n      }\n    }\n    \n    const toggleThink = (idx) => {\n      const chatId = currentChatId.value\n      if (!sessionThinkStates.value[chatId]) {\n        sessionThinkStates.value[chatId] = {}\n      }\n      // 如果未设置，则默认为true（展开状态）\n      if (sessionThinkStates.value[chatId][idx] === undefined) {\n        sessionThinkStates.value[chatId][idx] = true\n      }\n      sessionThinkStates.value[chatId][idx] = !sessionThinkStates.value[chatId][idx]\n      thinkStates.value = sessionThinkStates.value[chatId]\n    }\n    \n    const toggleThinkingState = () => {\n      showThinkingContent.value = !showThinkingContent.value\n    }\n\n    // 处理键盘事件\n    const handleKeydown = (e) => {\n      if (e.key === 'Enter') {\n        if (e.shiftKey) {\n          // Shift+Enter: 换行\n          return;\n        } else {\n          // Enter: 发送消息\n          e.preventDefault();\n          send();\n        }\n      }\n    };\n\n    // 自动调整输入框高度\n    const autoResizeInput = (e) => {\n      const textarea = e.target;\n      textarea.style.height = 'auto';\n      textarea.style.height = textarea.scrollHeight + 'px';\n    };\n\n    // 初始化加载\n    onMounted(async () => {\n      await fetchChatList()\n      if (currentChatId.value) {\n        await fetchMessages(currentChatId.value)\n      }\n      // 页面加载完成后滚动到底部\n      scrollToBottom()\n    })\n\n    // 监听会话切换自动拉取消息\n    watch(currentChatId, async (id) => {\n      if (id) {\n        if (sessionMessages.value[id]) {\n          currentMessages.value = sessionMessages.value[id]\n          thinkStates.value = sessionThinkStates.value[id] || {}\n          // 滚动到底部\n          scrollToBottom()\n        } else {\n          await fetchMessages(id)\n        }\n      }\n    })\n\n    return {\n      chatList,\n      currentChatId,\n      currentMessages,\n      input,\n      send,\n      newChat,\n      switchChat,\n      loading,\n      streamingText,\n      thinkStates,\n      toggleThink,\n      isThinking,\n      thinkingContent,\n      showThinkingContent,\n      toggleThinkingState,\n      autoResizeInput,\n      formatTime,\n      formatResponse,\n      isHeaderCollapsed,\n      toggleHeader,\n      handleKeydown\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-ai-layout {\n  display: flex;\n  height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  transition: all 0.3s ease;\n}\n\nbody.dark .chat-ai-layout {\n  background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n}\n.sidebar {\n  width: 300px;\n  background: linear-gradient(180deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 100%);\n  backdrop-filter: blur(15px);\n  border-right: 1px solid rgba(255, 255, 255, 0.3);\n  display: flex;\n  flex-direction: column;\n  transition: all 0.3s ease;\n  box-shadow: 2px 0 20px rgba(0, 0, 0, 0.1);\n}\n\nbody.dark .sidebar {\n  background: linear-gradient(180deg, rgba(44, 62, 80, 0.9) 0%, rgba(52, 73, 94, 0.7) 100%);\n  border-right: 1px solid rgba(255, 255, 255, 0.15);\n  box-shadow: 2px 0 20px rgba(0, 0, 0, 0.3);\n}\n.sidebar-header {\n  padding: 25px 20px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);\n  position: relative;\n}\n\n.sidebar-header::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(90deg, #667eea, #764ba2);\n  opacity: 0.6;\n}\n\n.sidebar-header h2 {\n  margin: 0 0 8px 0;\n  color: #2c3e50;\n  font-size: 20px;\n  font-weight: 700;\n  transition: color 0.3s ease;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.subtitle {\n  margin: 0;\n  color: #7f8c8d;\n  font-size: 13px;\n  transition: color 0.3s ease;\n  font-weight: 500;\n}\n\nbody.dark .sidebar-header {\n  border-bottom: 1px solid rgba(255, 255, 255, 0.08);\n  background: linear-gradient(135deg, rgba(52, 152, 219, 0.1) 0%, rgba(52, 73, 94, 0.1) 100%);\n}\n\nbody.dark .sidebar-header::before {\n  background: linear-gradient(90deg, #3498db, #2980b9);\n}\n\nbody.dark .sidebar-header h2 {\n  color: #ecf0f1;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n}\n\nbody.dark .subtitle {\n  color: #bdc3c7;\n}\n.chat-list {\n  flex: 1;\n  overflow-y: auto;\n  padding: 15px;\n}\n\n.chat-item {\n  padding: 15px;\n  margin-bottom: 10px;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  background: rgba(255, 255, 255, 0.8);\n  color: #2c3e50;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  position: relative;\n  overflow: hidden;\n}\n\n.chat-item::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 3px;\n  height: 100%;\n  background: linear-gradient(180deg, #667eea, #764ba2);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.chat-item:hover {\n  background: rgba(255, 255, 255, 0.95);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  border-color: rgba(102, 126, 234, 0.3);\n}\n\n.chat-item:hover::before {\n  opacity: 1;\n}\n\n.chat-item.active {\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n  border-color: rgba(255, 255, 255, 0.2);\n}\n\n.chat-item.active::before {\n  opacity: 1;\n  background: rgba(255, 255, 255, 0.3);\n}\n\nbody.dark .chat-item {\n  background: rgba(44, 62, 80, 0.8);\n  color: #ecf0f1;\n  border-color: rgba(255, 255, 255, 0.1);\n}\n\nbody.dark .chat-item:hover {\n  background: rgba(44, 62, 80, 0.95);\n  border-color: rgba(52, 152, 219, 0.3);\n}\n\nbody.dark .chat-item.active {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);\n}\n.chat-summary {\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 4px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.chat-time {\n  font-size: 11px;\n  opacity: 0.7;\n  transition: opacity 0.3s ease;\n}\n\nbody.dark .chat-time {\n  opacity: 0.5;\n}\n.new-chat-btn {\n  margin: 15px;\n  padding: 14px 16px;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  border: none;\n  border-radius: 12px;\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n  position: relative;\n  overflow: hidden;\n}\n\n.new-chat-btn::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s ease;\n}\n\n.new-chat-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);\n}\n\n.new-chat-btn:hover::before {\n  left: 100%;\n}\n\nbody.dark .new-chat-btn {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);\n}\n\nbody.dark .new-chat-btn:hover {\n  box-shadow: 0 6px 16px rgba(52, 152, 219, 0.4);\n}\n.chat-main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n}\n\nbody.dark .chat-main {\n  background: rgba(44, 62, 80, 0.95);\n}\n\n.chat-header {\n  padding: 20px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  text-align: center;\n  transition: all 0.3s ease;\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.chat-header.collapsed {\n  padding: 5px 20px;\n  min-height: 10px;\n  max-height: 40px;\n}\n\n.header-content {\n  flex: 1;\n  text-align: center;\n  transition: all 0.3s ease;\n  overflow: hidden;\n  max-height: 200px;\n}\n\n.chat-header.collapsed .header-content {\n  opacity: 0;\n  max-height: 0;\n  margin: 0;\n  padding: 0;\n}\n\n.collapse-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  color: #667eea;\n  padding: 8px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  right: 20px;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 10;\n}\n\n.collapse-btn:hover {\n  background: rgba(102, 126, 234, 0.1);\n  transform: translateY(-50%) scale(1.1);\n}\n\nbody.dark .collapse-btn {\n  color: #3498db;\n}\n\nbody.dark .collapse-btn:hover {\n  background: rgba(52, 152, 219, 0.2);\n}\n\n.chat-header h1 {\n  margin: 0 0 10px 0;\n  color: #333;\n  font-size: 24px;\n  font-weight: 600;\n  transition: color 0.3s ease;\n}\n\n.features {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.feature-tag {\n  padding: 4px 12px;\n  background: #667eea;\n  color: white;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\nbody.dark .chat-header {\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\nbody.dark .chat-header h1 {\n  color: #ecf0f1;\n}\n\nbody.dark .feature-tag {\n  background: #3498db;\n}\n.chat-main h2 {\n  margin: 0 0 20px 0;\n}\n.chat-window {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n.messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n.message {\n  display: flex;\n  gap: 12px;\n  max-width: 80%;\n}\n\n.message.user {\n  align-self: flex-end;\n  flex-direction: row-reverse;\n}\n\n.message.assistant {\n  align-self: flex-start;\n}\n.message-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 20px;\n  flex-shrink: 0;\n}\n\n.user-avatar {\n  background: #667eea;\n  color: white;\n}\n\n.ai-avatar {\n  background: #764ba2;\n  color: white;\n}\n.message-content {\n  flex: 1;\n  min-width: 0;\n}\n\n\n.ai-message-container {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 100%;\n}\n\n.user-message {\n  background: #667eea;\n  color: white;\n  padding: 12px 16px;\n  border-radius: 18px 18px 4px 18px;\n  word-wrap: break-word;\n}\n\n.ai-response {\n  background: #f8f9fa;\n  border: 1px solid #e9ecef;\n  padding: 16px;\n  border-radius: 18px 18px 18px 4px;\n  word-wrap: break-word;\n}\n\nbody.dark .ai-response {\n  background: #34495e;\n  border: 1px solid #2c3e50;\n}\n.input-bar {\n  padding: 20px;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  background: rgba(255, 255, 255, 0.9);\n  transition: all 0.3s ease;\n}\n\nbody.dark .input-bar {\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n  background: rgba(44, 62, 80, 0.9);\n}\n.input-wrapper {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 15px;\n}\n\n.input-auto {\n  flex: 1;\n  padding: 12px 16px;\n  border: 2px solid #e9ecef;\n  border-radius: 25px;\n  font-size: 14px;\n  outline: none;\n  transition: all 0.3s ease;\n  max-height: 120px;\n  min-height: 48px;\n  background: white;\n  color: #333;\n}\n\n.input-auto:focus {\n  border-color: #667eea;\n}\n\n.input-auto:disabled {\n  background: #f8f9fa;\n  cursor: not-allowed;\n}\n\nbody.dark .input-auto {\n  background: #34495e;\n  border-color: #2c3e50;\n  color: #ecf0f1;\n}\n\nbody.dark .input-auto:focus {\n  border-color: #3498db;\n}\n\nbody.dark .input-auto:disabled {\n  background: #2c3e50;\n  color: #95a5a6;\n}\n\nbody.dark .input-auto::placeholder {\n  color: #95a5a6;\n}\n.send-btn {\n  padding: 12px 24px;\n  background: #667eea;\n  color: white;\n  border: none;\n  border-radius: 25px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  white-space: nowrap;\n}\n\n.send-btn:hover:not(:disabled) {\n  background: #5a6fd8;\n  transform: translateY(-1px);\n}\n\n.send-btn:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n  transform: none;\n}\n\nbody.dark .send-btn {\n  background: #3498db;\n}\n\nbody.dark .send-btn:hover:not(:disabled) {\n  background: #2980b9;\n}\n\nbody.dark .send-btn:disabled {\n  background: #7f8c8d;\n}\n/* AI思考过程样式 */\n.ai-think {\n  background: #f8f9fa;\n  border: 1px solid #e9ecef;\n  border-radius: 8px;\n  margin-bottom: 12px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n  transition: all 0.2s ease;\n  max-width: 80%;\n  display: inline-block;\n}\n.ai-think:hover {\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\nbody.dark .ai-think {\n  background: #1a2633;\n  border-color: #2d4a63;\n}\n.ai-think-header {\n  font-weight: bold;\n  color: #2b6cb0;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  user-select: none;\n  padding: 10px 16px;\n  font-size: 0.9rem;\n  transition: background-color 0.2s ease;\n}\n\n/* 思考中状态的特殊样式 */\n.message.ai .ai-think-header.thinking::after {\n  content: \"\";\n  display: inline-block;\n  width: 12px;\n  height: 12px;\n  margin-left: 8px;\n  background-color: #2b6cb0;\n  border-radius: 50%;\n  animation: thinking-pulse 1.5s infinite;\n}\n\n@keyframes thinking-pulse {\n  0% { opacity: 1; transform: scale(1); }\n  50% { opacity: 0.6; transform: scale(0.8); }\n  100% { opacity: 1; transform: scale(1); }\n}\n.ai-think-header:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\nbody.dark .ai-think-header {\n  color: #63b3ed;\n}\nbody.dark .ai-think-header:hover {\n  background-color: rgba(255, 255, 255, 0.05);\n}\n.think-toggle {\n  display: inline-block;\n  width: 16px;\n  margin-right: 6px;\n  font-size: 12px;\n}\n.ai-think-content {\n  color: #2d3748;\n  white-space: pre-wrap;\n  padding: 12px 16px;\n  font-size: 0.95rem;\n  line-height: 1.5;\n  border-top: 1px solid #e9ecef;\n  transition: max-height 0.3s ease;\n  background-color: #f8f9fa;\n}\nbody.dark .ai-think-content {\n  color: #e2e8f0;\n  border-top-color: #2d4a63;\n  background-color: #1a2633;\n}\n\n/* AI最终回复样式 */\n.ai-response {\n  color: #333;\n  white-space: pre-wrap;\n  padding: 12px 16px;\n  font-size: 1rem;\n  line-height: 1.6;\n  background: #fff;\n  border-radius: 8px;\n  border-left: 3px solid #42b983;\n  box-shadow: 0 1px 2px rgba(0,0,0,0.05);\n  display: inline-block;\n  max-width: 80%;\n  min-width: 40px;\n}\n.ai-response.streaming {\n  border-left-color: #e67e22;\n  position: relative;\n  animation: pulse 1.5s infinite;\n}\n@keyframes pulse {\n  0% { opacity: 1; }\n  50% { opacity: 0.8; }\n  100% { opacity: 1; }\n}\nbody.dark .ai-response {\n  color: #f5f6fa;\n  background: #23272f;\n  border-left-color: #e67e22;\n}\n/* 思考中动画圆圈 */\n.thinking-dot {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  margin-left: 8px;\n  border-radius: 50%;\n  background: #2b6cb0;\n  animation: thinking-scale 1.2s infinite cubic-bezier(0.4,0,0.2,1);\n}\n@keyframes thinking-scale {\n  0% { transform: scale(1); opacity: 1; }\n  50% { transform: scale(0.6); opacity: 0.6; }\n  100% { transform: scale(1); opacity: 1; }\n}\n\n/* 加载动画样式 */\n.loading-dots {\n  display: inline-flex;\n  align-items: center;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  padding: 12px 16px;\n  margin-bottom: 12px;\n  max-width: 80px;\n}\n\nbody.dark .loading-dots {\n  background-color: #1a2633;\n}\n\n.loading-dots .dot {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background-color: #e67e22;\n  margin: 0 4px;\n  animation: bounce 1.4s infinite ease-in-out both;\n}\n\n.loading-dots .dot:nth-child(1) {\n  animation-delay: -0.32s;\n}\n\n.loading-dots .dot:nth-child(2) {\n  animation-delay: -0.16s;\n}\n\n@keyframes bounce {\n  0%, 80%, 100% { \n    transform: scale(0);\n    opacity: 0.6;\n  }\n  40% { \n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n/* 响应文本样式 */\n.response-text {\n  line-height: 1.6;\n}\n</style>","import { render } from \"./ChatAI.vue?vue&type=template&id=774ea79c&scoped=true\"\nimport script from \"./ChatAI.vue?vue&type=script&lang=js\"\nexport * from \"./ChatAI.vue?vue&type=script&lang=js\"\n\nimport \"./ChatAI.vue?vue&type=style&index=0&id=774ea79c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-774ea79c\"]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","$setup","chatList","chat","key","chatId","_normalizeClass","currentChatId","onClick","$event","switchChat","_hoisted_5","_toDisplayString","summary","_hoisted_6","formatTime","createTime","_cache","args","newChat","_hoisted_7","isHeaderCollapsed","toggleHeader","title","_hoisted_8","_hoisted_9","_hoisted_10","currentMessages","msg","idx","role","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","text","_hoisted_17","think","_hoisted_18","toggleThink","_hoisted_20","thinkStates","isThinking","length","loading","_hoisted_21","_hoisted_22","_hoisted_23","innerHTML","formatResponse","_hoisted_25","_hoisted_26","input","onInput","autoResizeInput","onKeydown","handleKeydown","placeholder","disabled","rows","style","_hoisted_28","send","trim","_hoisted_30","_hoisted_31","genId","Date","now","Math","random","toString","slice","name","setup","ref","streamingText","thinkingContent","showThinkingContent","isThinkingComplete","sessionMessages","sessionLoading","sessionStreaming","sessionThinkStates","fetchChatList","async","resp","axios","get","chatIdsWithTime","data","chatListWithTitles","Object","entries","messagesResp","messages","firstUserMessage","find","content","push","error","sort","a","b","value","console","fetchMessages","map","includes","thinkMatch","match","replace","thinkStatesForChat","forEach","scrollToBottom","id","isCurrentlyThinking","setTimeout","messagesEl","document","querySelector","scrollTop","scrollHeight","timestamp","date","toLocaleDateString","toLocaleTimeString","newId","prompt","currentTime","unshift","currentChat","c","processAIResponse","url","getUri","params","fetch","method","body","Error","reader","getReader","aiText","inThinkingMode","thinkingCompleted","tempMsgIdx","done","read","chunk","TextDecoder","decode","cleanedText","split","thinkStartIndex","indexOf","substring","thinkContent","finalText","afterThink","e","errorMsgIdx","message","undefined","toggleThinkingState","shiftKey","preventDefault","textarea","target","height","onMounted","watch","__exports__","render"],"sourceRoot":""}